2023/10/27 17:36:51 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 722791707
    GPU 0,1: NVIDIA TITAN RTX
    CUDA_HOME: /usr/local/cuda-10.2
    NVCC: Cuda compilation tools, release 10.2, V10.2.8
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 2.0.0
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.0
    OpenCV: 4.7.0
    MMEngine: 0.9.0

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 722791707
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 2
------------------------------------------------------------

2023/10/27 17:36:52 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = '/mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/data/datasets/DOTA1024/'
dataset_type = 'DOTADataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'pytorch'
load_from = '/mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/projects/OpenRS/work_dirs/faster-rcnn_r50_fpn_1x_dotav1_0/epoch_12.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=15,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.0001,
        type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file=
        '/mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/data/datasets/DOTA1024/test/DOTA_test1024.json',
        backend_args=None,
        data_prefix=dict(
            img=
            '/mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/data/datasets/DOTA1024/test/images'
        ),
        data_root=
        '/mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/data/datasets/DOTA1024/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1024,
                1024,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='DOTADataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file=
    '/mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/data/datasets/DOTA1024/test/DOTA_test1024.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1024,
        1024,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=12, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=8,
    dataset=dict(
        ann_file=
        '/mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/data/datasets/DOTA1024/trainval/DOTA_trainval1024.json',
        backend_args=None,
        data_prefix=dict(
            img=
            '/mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/data/datasets/DOTA1024/trainval/images/'
        ),
        data_root=
        '/mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/data/datasets/DOTA1024/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1024,
                1024,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='DOTADataset'),
    num_workers=16,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1024,
        1024,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file=
        '/mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/data/datasets/DOTA1024/trainval/DOTA_trainval1024.json',
        backend_args=None,
        data_prefix=dict(
            img=
            '/mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/data/datasets/DOTA1024/trainval/images'
        ),
        data_root=
        '/mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/data/datasets/DOTA1024/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1024,
                1024,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='DOTADataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file=
    '/mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/data/datasets/DOTA1024/trainval/DOTA_trainval1024.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/faster-rcnn_r50_fpn_1x_dotav1_0'

2023/10/27 17:36:54 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/10/27 17:36:55 - mmengine - WARNING - The prefix is not set in metric class DumpDetResults.
2023/10/27 17:36:56 - mmengine - INFO - Load checkpoint from /mnt/bee9bc2f-b897-4648-b8c4-909715332cb4/linshaoqing/projects/OpenRS/work_dirs/faster-rcnn_r50_fpn_1x_dotav1_0/epoch_12.pth
2023/10/27 17:37:01 - mmengine - INFO - Epoch(test) [  50/5417]    eta: 0:08:23  time: 0.0938  data_time: 0.0113  memory: 673  
2023/10/27 17:37:03 - mmengine - INFO - Epoch(test) [ 100/5417]    eta: 0:06:18  time: 0.0484  data_time: 0.0018  memory: 673  
2023/10/27 17:37:06 - mmengine - INFO - Epoch(test) [ 150/5417]    eta: 0:05:34  time: 0.0485  data_time: 0.0020  memory: 673  
2023/10/27 17:37:08 - mmengine - INFO - Epoch(test) [ 200/5417]    eta: 0:05:11  time: 0.0481  data_time: 0.0018  memory: 673  
2023/10/27 17:37:11 - mmengine - INFO - Epoch(test) [ 250/5417]    eta: 0:04:56  time: 0.0483  data_time: 0.0018  memory: 673  
2023/10/27 17:37:13 - mmengine - INFO - Epoch(test) [ 300/5417]    eta: 0:04:46  time: 0.0484  data_time: 0.0019  memory: 673  
2023/10/27 17:37:15 - mmengine - INFO - Epoch(test) [ 350/5417]    eta: 0:04:37  time: 0.0478  data_time: 0.0017  memory: 673  
2023/10/27 17:37:18 - mmengine - INFO - Epoch(test) [ 400/5417]    eta: 0:04:30  time: 0.0482  data_time: 0.0018  memory: 673  
2023/10/27 17:37:20 - mmengine - INFO - Epoch(test) [ 450/5417]    eta: 0:04:24  time: 0.0487  data_time: 0.0021  memory: 673  
2023/10/27 17:37:23 - mmengine - INFO - Epoch(test) [ 500/5417]    eta: 0:04:19  time: 0.0482  data_time: 0.0018  memory: 673  
2023/10/27 17:37:25 - mmengine - INFO - Epoch(test) [ 550/5417]    eta: 0:04:14  time: 0.0479  data_time: 0.0018  memory: 673  
2023/10/27 17:37:28 - mmengine - INFO - Epoch(test) [ 600/5417]    eta: 0:04:10  time: 0.0481  data_time: 0.0018  memory: 673  
2023/10/27 17:37:30 - mmengine - INFO - Epoch(test) [ 650/5417]    eta: 0:04:06  time: 0.0481  data_time: 0.0018  memory: 673  
2023/10/27 17:37:32 - mmengine - INFO - Epoch(test) [ 700/5417]    eta: 0:04:02  time: 0.0486  data_time: 0.0019  memory: 673  
2023/10/27 17:37:35 - mmengine - INFO - Epoch(test) [ 750/5417]    eta: 0:03:59  time: 0.0481  data_time: 0.0016  memory: 673  
2023/10/27 17:37:37 - mmengine - INFO - Epoch(test) [ 800/5417]    eta: 0:03:55  time: 0.0482  data_time: 0.0016  memory: 673  
2023/10/27 17:37:40 - mmengine - INFO - Epoch(test) [ 850/5417]    eta: 0:03:52  time: 0.0486  data_time: 0.0018  memory: 673  
2023/10/27 17:37:42 - mmengine - INFO - Epoch(test) [ 900/5417]    eta: 0:03:49  time: 0.0489  data_time: 0.0018  memory: 673  
2023/10/27 17:37:44 - mmengine - INFO - Epoch(test) [ 950/5417]    eta: 0:03:46  time: 0.0483  data_time: 0.0017  memory: 673  
2023/10/27 17:37:47 - mmengine - INFO - Epoch(test) [1000/5417]    eta: 0:03:43  time: 0.0486  data_time: 0.0017  memory: 673  
2023/10/27 17:37:49 - mmengine - INFO - Epoch(test) [1050/5417]    eta: 0:03:40  time: 0.0483  data_time: 0.0017  memory: 673  
2023/10/27 17:37:52 - mmengine - INFO - Epoch(test) [1100/5417]    eta: 0:03:37  time: 0.0482  data_time: 0.0016  memory: 673  
2023/10/27 17:37:54 - mmengine - INFO - Epoch(test) [1150/5417]    eta: 0:03:34  time: 0.0484  data_time: 0.0017  memory: 673  
2023/10/27 17:37:57 - mmengine - INFO - Epoch(test) [1200/5417]    eta: 0:03:31  time: 0.0487  data_time: 0.0017  memory: 673  
2023/10/27 17:37:59 - mmengine - INFO - Epoch(test) [1250/5417]    eta: 0:03:28  time: 0.0482  data_time: 0.0016  memory: 673  
2023/10/27 17:38:01 - mmengine - INFO - Epoch(test) [1300/5417]    eta: 0:03:26  time: 0.0484  data_time: 0.0016  memory: 673  
2023/10/27 17:38:04 - mmengine - INFO - Epoch(test) [1350/5417]    eta: 0:03:23  time: 0.0483  data_time: 0.0016  memory: 673  
2023/10/27 17:38:06 - mmengine - INFO - Epoch(test) [1400/5417]    eta: 0:03:20  time: 0.0487  data_time: 0.0017  memory: 673  
2023/10/27 17:38:09 - mmengine - INFO - Epoch(test) [1450/5417]    eta: 0:03:18  time: 0.0516  data_time: 0.0046  memory: 673  
2023/10/27 17:38:11 - mmengine - INFO - Epoch(test) [1500/5417]    eta: 0:03:15  time: 0.0484  data_time: 0.0015  memory: 673  
2023/10/27 17:38:14 - mmengine - INFO - Epoch(test) [1550/5417]    eta: 0:03:13  time: 0.0485  data_time: 0.0015  memory: 673  
2023/10/27 17:38:16 - mmengine - INFO - Epoch(test) [1600/5417]    eta: 0:03:10  time: 0.0488  data_time: 0.0016  memory: 673  
2023/10/27 17:38:19 - mmengine - INFO - Epoch(test) [1650/5417]    eta: 0:03:07  time: 0.0488  data_time: 0.0016  memory: 673  
2023/10/27 17:38:21 - mmengine - INFO - Epoch(test) [1700/5417]    eta: 0:03:05  time: 0.0488  data_time: 0.0017  memory: 673  
2023/10/27 17:38:24 - mmengine - INFO - Epoch(test) [1750/5417]    eta: 0:03:02  time: 0.0490  data_time: 0.0017  memory: 673  
2023/10/27 17:38:26 - mmengine - INFO - Epoch(test) [1800/5417]    eta: 0:03:00  time: 0.0487  data_time: 0.0016  memory: 673  
2023/10/27 17:38:28 - mmengine - INFO - Epoch(test) [1850/5417]    eta: 0:02:57  time: 0.0483  data_time: 0.0015  memory: 673  
2023/10/27 17:38:31 - mmengine - INFO - Epoch(test) [1900/5417]    eta: 0:02:54  time: 0.0485  data_time: 0.0016  memory: 673  
2023/10/27 17:38:33 - mmengine - INFO - Epoch(test) [1950/5417]    eta: 0:02:52  time: 0.0483  data_time: 0.0015  memory: 673  
2023/10/27 17:38:36 - mmengine - INFO - Epoch(test) [2000/5417]    eta: 0:02:49  time: 0.0491  data_time: 0.0023  memory: 673  
2023/10/27 17:38:38 - mmengine - INFO - Epoch(test) [2050/5417]    eta: 0:02:47  time: 0.0487  data_time: 0.0015  memory: 673  
2023/10/27 17:38:41 - mmengine - INFO - Epoch(test) [2100/5417]    eta: 0:02:44  time: 0.0485  data_time: 0.0015  memory: 673  
2023/10/27 17:38:43 - mmengine - INFO - Epoch(test) [2150/5417]    eta: 0:02:41  time: 0.0489  data_time: 0.0019  memory: 673  
2023/10/27 17:38:45 - mmengine - INFO - Epoch(test) [2200/5417]    eta: 0:02:39  time: 0.0486  data_time: 0.0015  memory: 673  
2023/10/27 17:38:48 - mmengine - INFO - Epoch(test) [2250/5417]    eta: 0:02:36  time: 0.0488  data_time: 0.0017  memory: 673  
2023/10/27 17:38:50 - mmengine - INFO - Epoch(test) [2300/5417]    eta: 0:02:34  time: 0.0503  data_time: 0.0029  memory: 673  
2023/10/27 17:38:53 - mmengine - INFO - Epoch(test) [2350/5417]    eta: 0:02:31  time: 0.0489  data_time: 0.0016  memory: 673  
2023/10/27 17:38:55 - mmengine - INFO - Epoch(test) [2400/5417]    eta: 0:02:29  time: 0.0489  data_time: 0.0018  memory: 673  
2023/10/27 17:38:58 - mmengine - INFO - Epoch(test) [2450/5417]    eta: 0:02:26  time: 0.0491  data_time: 0.0016  memory: 673  
2023/10/27 17:39:00 - mmengine - INFO - Epoch(test) [2500/5417]    eta: 0:02:24  time: 0.0492  data_time: 0.0017  memory: 673  
2023/10/27 17:39:03 - mmengine - INFO - Epoch(test) [2550/5417]    eta: 0:02:21  time: 0.0493  data_time: 0.0017  memory: 673  
2023/10/27 17:39:05 - mmengine - INFO - Epoch(test) [2600/5417]    eta: 0:02:19  time: 0.0488  data_time: 0.0016  memory: 673  
2023/10/27 17:39:08 - mmengine - INFO - Epoch(test) [2650/5417]    eta: 0:02:16  time: 0.0488  data_time: 0.0018  memory: 673  
2023/10/27 17:39:10 - mmengine - INFO - Epoch(test) [2700/5417]    eta: 0:02:14  time: 0.0491  data_time: 0.0018  memory: 673  
2023/10/27 17:39:13 - mmengine - INFO - Epoch(test) [2750/5417]    eta: 0:02:11  time: 0.0491  data_time: 0.0017  memory: 673  
2023/10/27 17:39:15 - mmengine - INFO - Epoch(test) [2800/5417]    eta: 0:02:09  time: 0.0495  data_time: 0.0017  memory: 673  
2023/10/27 17:39:17 - mmengine - INFO - Epoch(test) [2850/5417]    eta: 0:02:06  time: 0.0489  data_time: 0.0017  memory: 673  
2023/10/27 17:39:20 - mmengine - INFO - Epoch(test) [2900/5417]    eta: 0:02:04  time: 0.0487  data_time: 0.0017  memory: 673  
2023/10/27 17:39:22 - mmengine - INFO - Epoch(test) [2950/5417]    eta: 0:02:01  time: 0.0493  data_time: 0.0018  memory: 673  
2023/10/27 17:39:25 - mmengine - INFO - Epoch(test) [3000/5417]    eta: 0:01:59  time: 0.0498  data_time: 0.0017  memory: 673  
2023/10/27 17:39:27 - mmengine - INFO - Epoch(test) [3050/5417]    eta: 0:01:57  time: 0.0500  data_time: 0.0017  memory: 673  
2023/10/27 17:39:30 - mmengine - INFO - Epoch(test) [3100/5417]    eta: 0:01:54  time: 0.0493  data_time: 0.0017  memory: 673  
2023/10/27 17:39:32 - mmengine - INFO - Epoch(test) [3150/5417]    eta: 0:01:52  time: 0.0494  data_time: 0.0023  memory: 673  
2023/10/27 17:39:35 - mmengine - INFO - Epoch(test) [3200/5417]    eta: 0:01:49  time: 0.0494  data_time: 0.0017  memory: 673  
2023/10/27 17:39:37 - mmengine - INFO - Epoch(test) [3250/5417]    eta: 0:01:47  time: 0.0488  data_time: 0.0016  memory: 673  
2023/10/27 17:39:40 - mmengine - INFO - Epoch(test) [3300/5417]    eta: 0:01:44  time: 0.0489  data_time: 0.0016  memory: 673  
2023/10/27 17:39:42 - mmengine - INFO - Epoch(test) [3350/5417]    eta: 0:01:42  time: 0.0490  data_time: 0.0016  memory: 673  
2023/10/27 17:39:45 - mmengine - INFO - Epoch(test) [3400/5417]    eta: 0:01:39  time: 0.0489  data_time: 0.0016  memory: 673  
2023/10/27 17:39:47 - mmengine - INFO - Epoch(test) [3450/5417]    eta: 0:01:37  time: 0.0495  data_time: 0.0020  memory: 673  
2023/10/27 17:39:50 - mmengine - INFO - Epoch(test) [3500/5417]    eta: 0:01:34  time: 0.0497  data_time: 0.0017  memory: 673  
2023/10/27 17:39:52 - mmengine - INFO - Epoch(test) [3550/5417]    eta: 0:01:32  time: 0.0490  data_time: 0.0016  memory: 673  
2023/10/27 17:39:54 - mmengine - INFO - Epoch(test) [3600/5417]    eta: 0:01:29  time: 0.0497  data_time: 0.0018  memory: 673  
2023/10/27 17:39:57 - mmengine - INFO - Epoch(test) [3650/5417]    eta: 0:01:27  time: 0.0499  data_time: 0.0019  memory: 673  
2023/10/27 17:39:59 - mmengine - INFO - Epoch(test) [3700/5417]    eta: 0:01:24  time: 0.0501  data_time: 0.0020  memory: 673  
2023/10/27 17:40:02 - mmengine - INFO - Epoch(test) [3750/5417]    eta: 0:01:22  time: 0.0502  data_time: 0.0019  memory: 673  
2023/10/27 17:40:04 - mmengine - INFO - Epoch(test) [3800/5417]    eta: 0:01:19  time: 0.0497  data_time: 0.0018  memory: 673  
2023/10/27 17:40:07 - mmengine - INFO - Epoch(test) [3850/5417]    eta: 0:01:17  time: 0.0497  data_time: 0.0018  memory: 673  
2023/10/27 17:40:09 - mmengine - INFO - Epoch(test) [3900/5417]    eta: 0:01:15  time: 0.0495  data_time: 0.0018  memory: 673  
2023/10/27 17:40:12 - mmengine - INFO - Epoch(test) [3950/5417]    eta: 0:01:12  time: 0.0497  data_time: 0.0019  memory: 673  
2023/10/27 17:40:14 - mmengine - INFO - Epoch(test) [4000/5417]    eta: 0:01:10  time: 0.0506  data_time: 0.0031  memory: 673  
2023/10/27 17:40:17 - mmengine - INFO - Epoch(test) [4050/5417]    eta: 0:01:07  time: 0.0498  data_time: 0.0019  memory: 673  
2023/10/27 17:40:20 - mmengine - INFO - Epoch(test) [4100/5417]    eta: 0:01:05  time: 0.0504  data_time: 0.0018  memory: 673  
2023/10/27 17:40:22 - mmengine - INFO - Epoch(test) [4150/5417]    eta: 0:01:02  time: 0.0494  data_time: 0.0017  memory: 673  
2023/10/27 17:40:24 - mmengine - INFO - Epoch(test) [4200/5417]    eta: 0:01:00  time: 0.0502  data_time: 0.0018  memory: 673  
2023/10/27 17:40:27 - mmengine - INFO - Epoch(test) [4250/5417]    eta: 0:00:57  time: 0.0495  data_time: 0.0018  memory: 673  
2023/10/27 17:40:29 - mmengine - INFO - Epoch(test) [4300/5417]    eta: 0:00:55  time: 0.0499  data_time: 0.0018  memory: 673  
2023/10/27 17:40:32 - mmengine - INFO - Epoch(test) [4350/5417]    eta: 0:00:52  time: 0.0495  data_time: 0.0017  memory: 673  
2023/10/27 17:40:34 - mmengine - INFO - Epoch(test) [4400/5417]    eta: 0:00:50  time: 0.0498  data_time: 0.0018  memory: 673  
2023/10/27 17:40:37 - mmengine - INFO - Epoch(test) [4450/5417]    eta: 0:00:47  time: 0.0498  data_time: 0.0019  memory: 673  
2023/10/27 17:40:39 - mmengine - INFO - Epoch(test) [4500/5417]    eta: 0:00:45  time: 0.0489  data_time: 0.0016  memory: 673  
2023/10/27 17:40:42 - mmengine - INFO - Epoch(test) [4550/5417]    eta: 0:00:42  time: 0.0499  data_time: 0.0018  memory: 673  
2023/10/27 17:40:44 - mmengine - INFO - Epoch(test) [4600/5417]    eta: 0:00:40  time: 0.0502  data_time: 0.0022  memory: 673  
2023/10/27 17:40:47 - mmengine - INFO - Epoch(test) [4650/5417]    eta: 0:00:37  time: 0.0495  data_time: 0.0017  memory: 673  
2023/10/27 17:40:49 - mmengine - INFO - Epoch(test) [4700/5417]    eta: 0:00:35  time: 0.0497  data_time: 0.0017  memory: 673  
2023/10/27 17:40:52 - mmengine - INFO - Epoch(test) [4750/5417]    eta: 0:00:33  time: 0.0496  data_time: 0.0017  memory: 673  
2023/10/27 17:40:54 - mmengine - INFO - Epoch(test) [4800/5417]    eta: 0:00:30  time: 0.0504  data_time: 0.0019  memory: 673  
2023/10/27 17:40:57 - mmengine - INFO - Epoch(test) [4850/5417]    eta: 0:00:28  time: 0.0498  data_time: 0.0017  memory: 673  
2023/10/27 17:40:59 - mmengine - INFO - Epoch(test) [4900/5417]    eta: 0:00:25  time: 0.0500  data_time: 0.0018  memory: 673  
2023/10/27 17:41:02 - mmengine - INFO - Epoch(test) [4950/5417]    eta: 0:00:23  time: 0.0500  data_time: 0.0018  memory: 673  
2023/10/27 17:41:04 - mmengine - INFO - Epoch(test) [5000/5417]    eta: 0:00:20  time: 0.0498  data_time: 0.0018  memory: 673  
2023/10/27 17:41:07 - mmengine - INFO - Epoch(test) [5050/5417]    eta: 0:00:18  time: 0.0499  data_time: 0.0018  memory: 673  
2023/10/27 17:41:09 - mmengine - INFO - Epoch(test) [5100/5417]    eta: 0:00:15  time: 0.0499  data_time: 0.0017  memory: 673  
2023/10/27 17:41:12 - mmengine - INFO - Epoch(test) [5150/5417]    eta: 0:00:13  time: 0.0509  data_time: 0.0026  memory: 673  
2023/10/27 17:41:14 - mmengine - INFO - Epoch(test) [5200/5417]    eta: 0:00:10  time: 0.0500  data_time: 0.0017  memory: 673  
2023/10/27 17:41:17 - mmengine - INFO - Epoch(test) [5250/5417]    eta: 0:00:08  time: 0.0494  data_time: 0.0016  memory: 673  
2023/10/27 17:41:19 - mmengine - INFO - Epoch(test) [5300/5417]    eta: 0:00:05  time: 0.0504  data_time: 0.0018  memory: 673  
2023/10/27 17:41:22 - mmengine - INFO - Epoch(test) [5350/5417]    eta: 0:00:03  time: 0.0499  data_time: 0.0017  memory: 673  
2023/10/27 17:41:24 - mmengine - INFO - Epoch(test) [5400/5417]    eta: 0:00:00  time: 0.0497  data_time: 0.0015  memory: 673  
2023/10/27 17:41:39 - mmengine - INFO - Evaluating bbox...
2023/10/27 17:41:50 - mmengine - INFO - bbox_mAP_copypaste: -1.000 -1.000 -1.000 -1.000 -1.000 -1.000
2023/10/27 17:41:57 - mmengine - INFO - Results has been saved to work_dirs/faster-rcnn_r50_fpn_1x_dotav1_0/results.pkl.
2023/10/27 17:41:57 - mmengine - INFO - Epoch(test) [5417/5417]    coco/bbox_mAP: -1.0000  coco/bbox_mAP_50: -1.0000  coco/bbox_mAP_75: -1.0000  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: -1.0000  data_time: 0.0019  time: 0.0496
